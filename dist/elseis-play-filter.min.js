!function () {
    'use strict';
    angular.module('elseis.playFilter', ["restangular"]);
}(), function () {
    'use strict';
    angular.module('elseis.playFilter').config(["RestangularProvider",function(e){e.setBaseUrl("http://alltheater.elseis.es/wp-json/wp/v2/")}]);
}(), function () {
    'use strict';
    function e(e, t) {
        function l() {
            var e = r.play.miniatura;
            r.play.miniatura = e.slice(0, e.length - 4) + '-630x370' + e.slice(e.length - 4, e.length);
        }
        var r = this;
        r.$onInit = function () {
        }, r.$onChanges = function (e) {
            l();
        }, r.redirectToPlay = function () {
            e.location.href = r.play.link;
        };
    }
    e.$inject = ["$window","$scope"], angular.module('elseis.playFilter').component('elseisPlay', {
        bindings: { play: '<' },
        controller: e,
        controllerAs: 'elseisPlayCtrl',
        templateUrl: 'src/scripts/elseisPlay/elseisPlay.tpl.html'
    });
}(), function () {
    'use strict';
    function e(e) {
        function t() {
            d.currentSearchfilter = 'obras-api/?';
            var t;
            d.taxonomy && (d.currentSearchfilter = d.currentSearchfilter + '&filter[taxonomy]=' + d.taxonomy), d.term && (d.currentSearchfilter = d.currentSearchfilter + '&filter[term]=' + d.term), d.kw && (d.currentSearchfilter = d.currentSearchfilter + '&filter[kw]=' + d.kw), d.currentSearchfilter = d.currentSearchfilter + '&filter[posts_per_page]=-1&filter[paged]=1', t = e.all(d.currentSearchfilter), t.getList().then(function (e) {
                d.plays = e;
            });
        }
        function l() {
            d.kw = d.kwInput, d.loadAllPlays();
        }
        function r(e) {
            d.selectedLetter = e, a(), n(e);
        }
        function n(e) {
            d.displayedAuthors = d.authors.filter(function (t) {
                var l = t.name.slice(0, 1).toUpperCase();
                return l == e.toUpperCase();
            });
        }
        function o() {
            var t = e.all('autor');
            t.getList().then(function (e) {
                d.authors = e;
            });
        }
        function i(e) {
            d.selectedAuthor = e;
        }
        function a() {
            d.selectedAuthor = '';
        }
        function s(e) {
            return d.selectedLetter == e;
        }
        function c() {
            d.dropdownVisible = !d.dropdownVisible;
        }
        function u(e) {
            d.selectedDropdownOption = e, d.toggleDropdown(), f(e);
        }
        function f(e) {
            'm\xE1s actuales' == e && (d.filter = 'antesDeHoyYHoy'), 'pr\xF3ximamente' == e && (d.filter = 'despuesDeHoy'), 'mejor valoradas' == e && (d.orderBy = 'likes', d.filter = 'todos'), 'm\xE1s visitas' == e && (d.orderBy = 'views', d.filter = 'todos');
        }
        var d = this;
        d.handleClickOnLetter = r, d.letterIsSelected = s, d.toggleDropdown = c, d.selectDropdownOption = u, d.loadAllPlays = t, d.loadAllAuthors = o, d.handleAuthorSelection = i, d.loadPlaysFilteredByKW = l, d.$onInit = function () {
            d.loadAllPlays(), d.loadAllAuthors();
        }, d.plays = [], d.currentSearchfilter = 'obras-api/?', d.kwInput = void 0, d.selectedLetter = void 0, d.abecedario = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","침","o","p","q","r","s","t","u","v","w","x","y","z"], d.displayedAuthors = [], d.authors = [], d.selectedAuthor = '', d.dropdownVisible = !1, d.dropdownOptions = ["m치s actuales","m치s visitas","mejor valoradas","pr칩ximamente"], d.selectedDropdownOption = 'm\xE1s actuales';
    }
    e.$inject = ["Restangular"], angular.module('elseis.playFilter').component('elseisPlayFilter', {
        bindings: {
            taxonomy: '<',
            term: '<',
            kw: '<'
        },
        controller: e,
        controllerAs: 'elseisPlayFilterCtrl',
        templateUrl: 'src/scripts/elseisPlayFilter/elseisPlayFilter.tpl.html'
    });
}(), function () {
    'use strict';
    function e() {
        function e(e) {
            e.filter && (s.localCategoryFilter = e.filter.currentValue);
        }
        function t(e) {
            e.orderBy && (s.orderBy = e.orderBy.currentValue);
        }
        function l(e) {
            e.authorFilter && (s.localSelectedAuthor = e.authorFilter.currentValue);
        }
        function r() {
            s.localPlays = s.localPlays.filter(function (e) {
                return e.autor[0] == s.localSelectedAuthor;
            });
        }
        function n() {
            var e = new Date();
            'antesDeHoyYHoy' == s.localCategoryFilter && (s.localPlays = s.localPlays.filter(function (t) {
                return new Date(t.estreno) <= e;
            })), 'despuesDeHoy' == s.localCategoryFilter && (s.localPlays = s.localPlays.filter(function (t) {
                return new Date(t.estreno) > e;
            }));
        }
        function o() {
            s.localPlays.forEach(function (e) {
                e.likes = parseInt(e.likes);
            });
        }
        function i() {
            s.localPlays.forEach(function (e) {
                e.views = parseInt(e.views);
            });
        }
        function a() {
            s.localPlays.forEach(function (e) {
                var t = e.estreno;
                e.estreno = t.slice(0, 4) + '-' + t.slice(4, 6) + '-' + t.slice(6, 8);
            });
        }
        var s = this;
        s.$onInit = function () {
        }, s.$onChanges = function (c) {
            s.localPlays = angular.copy(s.plays), o(), i(), a(), l(c), t(c), e(c), void 0 != s.localSelectedAuthor && r(), void 0 != s.localCategoryFilter && n();
        }, s.localSelectedAuthor = void 0, s.localCategoryFilter = void 0;
    }
    angular.module('elseis.playFilter').component('elseisPlaysDisplay', {
        bindings: {
            plays: '<',
            orderBy: '<',
            filter: '<',
            authorFilter: '<'
        },
        controller: e,
        controllerAs: 'elseisPlaysDisplayCtrl',
        templateUrl: 'src/scripts/elseisPlaysDisplay/elseisPlaysDisplay.tpl.html'
    });
}(), function () {
    'use strict';
    angular.module('elseis.playFilter').filter('masActuales', function () {
        return function (e) {
            return e.filter(function (e) {
            });
        };
    }).filter('mejorValoradas', ["$filter",function(e){return function(e){}}]);
}(), function () {
    'use strict';
    angular.module('elseis.playFilter').provider('elseisPlayFilterService', function () {
        function e(e) {
            var t = this;
            return t.getAllPlays = function () {
            }, t;
        }
        e.$inject = ["Restangular"], this.$get = e;
    });
}();